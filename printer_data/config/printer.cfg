[include fluidd.cfg]

[include moonraker_obico_macros.cfg]

#====================================================================
# MCU = BTT SKR Pico  and Creality 4.2.2 as AUX
#====================================================================

[mcu]
serial: /dev/ttyAMA0 #UART
#serial: /dev/ttyS0
#serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_36FFD5055058373918711343-if00
restart_method: command

[mcu aux]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

#====================================================================
# VIRTUAL SD CARD
#====================================================================

[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

#====================================================================
# PRINTER
#====================================================================

[printer]
kinematics: cartesian
max_velocity: 550
max_accel: 12000
max_z_velocity: 15
max_z_accel: 30

[screws_tilt_adjust]
screw1: 85, 220  #screw coordinates need to be measure for YOUR specific printer
screw2: 244, 220
screw3: 244, 50
screw4: 85, 50
screw1_name: rear left screw
screw2_name: rear right screw
screw3_name: front right screw
screw4_name: front left screw
#screw1_name: rear left screw
#screw2_name: rear right screw
#screw3_name: front right screw
#screw4_name: front left screw
horizontal_move_z: 10.
speed: 100.   #speed of travel moves between screws
screw_thread: CW-M4  #measure your bed screw m3=3mm / m4=4mm / m5=5mm
#screw1: 0, 116    #sml tilt of x gantry
#screw2: 160, 116. #sml tilt of x gantry 
#screw3: 160, 118. #sml tilt of x gantry
#screw4: 0, 118    #sml tilt of x gantry


[z_tilt]
z_positions:
    -30,110
    265,110 
    
points: 
    70,125
    242,125
retries: 5
retry_tolerance: 0.02 
speed:120

#====================================================================
# STEPPER X
#====================================================================

[stepper_x]
step_pin: gpio11
dir_pin: !gpio10
enable_pin: !gpio12
microsteps: 16
rotation_distance: 40.0 #this is based on CaliFlower calibration 22 Jul 2025
# endstop_pin: ^gpio4 #not needed for sensorless homing SML
endstop_pin: tmc2209_stepper_x:virtual_endstop
homing_retract_dist: 0
position_endstop: 0
position_max: 240
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 0
run_current: 0.9 #this was 0.7 for old motor
hold_current: 0.6
#stealthchop_threshold: 999999
stealthchop_threshold: 0 #for speedBenchy
diag_pin: ^gpio4  #sensorless homing sml
driver_SGTHRS: 100 #sensorless homing sml

#====================================================================
# STEPPER Y
#====================================================================

[stepper_y]
step_pin: gpio6
dir_pin: !gpio5
enable_pin: !gpio7
microsteps: 16
rotation_distance: 40.0 # This based on CaliFlower calibration 22 Jul 2025
# endstop_pin: ^gpio3 #Not needed for sensorless homing SML
endstop_pin: tmc2209_stepper_y:virtual_endstop
homing_retract_dist: 0
position_endstop: 0
position_max: 230
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 2
#run_current: 0.7
hold_current: 0.6
run_current: 0.9 #speed benchy
#stealthchop_threshold: 999999
stealthchop_threshold: 0 #for speedBenchy
diag_pin: ^gpio3
driver_SGTHRS: 110

#====================================================================
# STEPPER Z
#====================================================================

[stepper_z]
step_pin: gpio19
dir_pin: !gpio28
enable_pin: !gpio2
microsteps: 16
rotation_distance: 10
full_steps_per_rotation: 200 #200 for 1.8 degree, 400 for 0.9 degree
#position_endstop: 0
endstop_pin: probe:z_virtual_endstop
position_min: -6.0
position_max: 230
homing_speed: 12

[tmc2209 stepper_z]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 1
run_current: 0.8 #sml - was 0.580, after belted z mod changed to match y
hold_current: 0.6 #sml - was 0.500, after belted z mod changed to match y
#stealthchop_threshold: 999999
stealthchop_threshold: 0

##### THIS SECTION FOR Z1 are pins for the extruder port on SKR e3 v2

[stepper_z1]
step_pin: gpio14
dir_pin: !gpio13
enable_pin: !gpio15
microsteps: 16
rotation_distance: 10
full_steps_per_rotation: 200 #200 for 1.8 degree, 400 for 0.9 degree
#position_endstop: 0
endstop_pin: probe:z_virtual_endstop
#position_min: -6.0
#position_max: 230
#homing_speed: 12

[tmc2209 stepper_z1]
uart_pin: gpio9
tx_pin: gpio8
uart_address: 3
run_current: 0.8 #sml - was 0.580, after belted z mod changed to match y
hold_current: 0.6 #sml - was 0.500, after belted z mod changed to match y
#stealthchop_threshold: 999999
stealthchop_threshold: 0

#====================================================================
# EXTRUDER
#====================================================================

[extruder]
max_extrude_only_distance: 100.0
step_pin: aux:PB4
dir_pin: !aux:PB3
enable_pin: !aux:PC3
microsteps: 16
full_steps_per_rotation: 200 #sml
rotation_distance: 4.695 #sml 12 FEB 2025
max_extrude_only_distance: 800 #sml
max_extrude_only_velocity: 120 #sml
nozzle_diameter: 0.400
filament_diameter: 1.750
pressure_advance_smooth_time: 0.04 #sml
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
# tuned for stock hardware with 200 degree Celsius target
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 270

#====================================================================
# Raspberry Pi Temperature Display for Fluidd
#====================================================================

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

#====================================================================
# Y Axis Motor Temperature Display for Fluidd
#====================================================================

#[temperature_sensor Y_Axis_Motor]
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: aux:PC5
#min_temp: 0
#max_temp: 100

#====================================================================
# BED
#====================================================================

[heater_bed]
heater_pin: gpio21
sensor_type: EPCOS 100K B57560G104F
sensor_pin: gpio26
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

#====================================================================
# FANS
#====================================================================



[heater_fan box_fan]
pin: gpio20
heater: heater_bed
heater_temp: 45.0

[fan]
pin: gpio17

[fan]
pin: aux:PA0

#====================================================================
# INPUT SHAPER
#====================================================================

[input_shaper]
shaper_freq_x: 30.00
shaper_freq_y: 30.71
shaper_type: ei

#[board_pins]
#aliases:
#    # EXP1 header
#    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8,  EXP1_9=<GND>,
#    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB15, EXP1_10=<5V>

#[static_digital_output usb_pullup_enable]
#pins: !PA14

#====================================================================
# BL TOUCH
#====================================================================

[bltouch]
stow_on_each_sample: False
probe_with_touch_mode: True
sensor_pin: ^PC14 # this is unique to your mainboard
control_pin: PA1  #this is unique to your mainboard
x_offset: -56.5       #sml - from e3v2 config
y_offset: -5 #sml - from e3v2 config
samples: 3
speed: 3
samples_tolerance: 2
z_offset: 0.377
pin_up_touch_mode_reports_triggered: False

#====================================================================
# BED MESH PARAMETERS
#====================================================================

[bed_mesh]
speed: 225
horizontal_move_z: 5
mesh_min: 15, 35     #!!min and max co-ords are based on the probes location not the nozzle!!
mesh_max: 179, 224 #needs to be calibrated for your individual printer
probe_count: 5,5 #this is the number of probing points on X then Y axis
#mesh_min: 46, 21       #!!min and max co-ords are based on the probes location not the nozzle!!
#mesh_max: 209, 188  #needs to be calibrated for your individual printer
mesh_pps: 2,2
fade_start: 1
fade_end: 10
fade_target: 0

[safe_z_home]
home_xy_position: 125,125 #sml - this should be the center of your bed
speed: 100
z_hop: 3
z_hop_speed: 10

[include moonraker_obico_macros.cfg]



#====================================================================
# IDLE TIMEOUT 
#====================================================================

# [idle_timeout] allows Klipper to automatically shut down
# the printer after a period of inactivity, default is 5 minutes. 
# This can be useful for when needing to extend time between filament
#  swaps or pauses. I use for HueForge. 

# Time-out is in seconds, 30 minutes for safety reasons adjust
# at you own risk. 

[idle_timeout]

gcode:
   {% if printer.pause_resume.is_paused %}
     M118 Idle timeout while paused, turning off hotend
     SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
   {% else %}
     M118 Idle timeout
     TURN_OFF_HEATERS
     M84
   {% endif %}
 timeout: 1800


[gcode_macro START_PRINT]
gcode:
    #{% set BED_TEMP = params.BED_TEMP|default(60)|float %} #SML
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %} #SML
    # Start bed heating (but don't wait for it) #SML
    #M140 S{BED_TEMP} #SML
    #G92 E0 # Reset Extruder
    #G28 # Home all axes
    #BED_MESH_PROFILE LOAD=default
    # Wait for bed to reach temperature
    #M190 S{BED_TEMP} #SML
    # Set and wait for nozzle to reach temperature #SML
    #M109 S{EXTRUDER_TEMP} #SML
    #BED_MESH_CALIBRATE
    #G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    #G1 X0.1 Y20 Z0.3 F5000.0 # Move to start position
    #G1 X0.1 Y200.0 Z0.3 F1500.0 E15 # Draw the first line
    #G1 X0.4 Y200.0 Z0.3 F5000.0 # Move to side a little
    #G1 X0.4 Y20 Z0.3 F1500.0 E30 # Draw the second line
    #G92 E0 # Reset Extruder
    #G1 Z2.0 F3000 # Move Z Axis up little to prevent scratching of Heat Bed
    #G1 X5 Y20 Z0.3 F5000.0 # Move over to prevent blob squish



[gcode_macro END_PRINT]
gcode:
    #G91 #Relative positioning
    #G1 E-2 F2700 #Retract a bit
    #G1 E-2 Z0.2 F2400 #Retract and raise Z
    #G1 X5 Y5 F3000 #Wipe out
    #G1 Z10 #Raise Z more
    #G90 #Absolute positioning
    #G1 X0 Y200 #Present print
    #M106 S0 #Turn-off fan
    #M104 S0 #Turn-off hotend
    #M140 S0 #Turn-off bed
    #SAVE_IF_SET     ; SAVE_CONFIG if a mesh was probed in START_PRINT
    #M84 X Y E #Disable all steppers but Z

; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached

#[gcode_macro LEVEL_BED_ADVANCED]
#description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
#variable_save_at_end: 0
#gcode:
 # {% set max_age = params.MAX_AGE|default(10)|int %}
 #{% set force_level = params.FORCE|default(0)|int %}
 # {% set save = params.SAVE|default(0)|int %}

  #; load level_age from stored variables
  #{% set svv = printer.save_variables.variables %}
  #{% if "level_age" not in svv %} ; first run
  #  SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
  #  {% set level_age = 1 %}
  #{% else %} ; load level_age and increment
  #  {% set level_age = svv.level_age %}
  #  SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  #{% endif %}
  #{action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  #{% if force_level or (level_age >= max_age|int) %}
  #  {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

  # ; homing if not homed yet
  # {% if 'xy' not in printer.toolhead.homed_axes %}
  #  G28
  #  {% endif %}
  
   ;# BED_MESH_CALIBRATE
   ;# {% if save %}
   ;#   SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
   ;#  SAVE_CONFIG
   ;# {% else %}
   ;#   SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
   ;# {% endif %}
  ;#{% else %}
   ;# {action_respond_info("Loading old bed mesh.")} 
    ;#BED_MESH_PROFILE LOAD=default
  ;#{% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
#[gcode_macro SAVE_IF_SET]
#gcode:
# {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
# {action_respond_info("Saving was requested - saving and restarting now.")}
#  SAVE_VARIABLE VARIABLE=level_age VALUE=1
#  SAVE_CONFIG
#  {% endif %}

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x %}
        {% if x_min < 0 %}
            {% set x_min = 0 %}
        {% endif %}
    
        {% set y_min = printer.toolhead.axis_minimum.y %}
        {% if y_min < 0 %}
            {% set y_min = 0 %}
        {% endif %}
    
        {% set x_min = x_min + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = y_min + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
##*# [bltouch]
##*# z_offset = 2.025
##*#
##*# [bed_mesh default]
##*# version = 1
##*# points =
##*# 	0.032388, -0.022820, -0.019695, -0.006153, -0.014487
##*# 	-0.006153, -0.061362, -0.038445, -0.024903, -0.015528
##*# 	-0.007195, -0.048862, -0.047820, -0.047820, -0.019695
##*# 	0.032388, -0.057195, -0.053028, -0.033237, -0.024903
##*# 	0.015722, -0.049903, -0.042612, -0.044695, 0.000097
##*# x_count = 5
##*# y_count = 5
##*# mesh_x_pps = 2
##*# mesh_y_pps = 2
##*# algo = lagrange
##*# tension = 0.2
##*# min_x = 15.0
##*# max_x = 179.0
##*# min_y = 35.0
##*# max_y = 224.0
